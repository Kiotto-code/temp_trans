import { getWebSocketConfig, getChatConfig } from './chatConfig.js';

window.config = {};

const connections = new Map();
let socket = null;
let socketURL = null;

document.addEventListener('drawer-opened', () => {
    const { host, protocol, port } = getWebSocketConfig();
    const { nickname, roomId } = getChatConfig();
    
    if (!roomId || !nickname) {
        console.error('Room ID or nickname is missing.');
        return;
    }
    
    window.config = { host, protocol, port, nickname, roomId };
    socketURL = `${protocol}//${host}:${port}/drawer/chat-friendroom/${roomId}/?customer_name=${nickname}`;
    
    console.log(`Connecting to ${socketURL}`);

    document.getElementById('message-input').addEventListener('keydown', handleMessage);
    document.getElementById('send-button').addEventListener('click', sendMessage);

    connectToRoom(roomId);
});

function connectToRoom(roomId) {
    if (!roomId) {
        console.error('Room ID is required to connect.');
        return;
    }
    
    if (connections.has(roomId)) {
        console.log(`Already connected to room ${roomId}`);
        return;
    }
    
    socket = new WebSocket(socketURL);

    socket.onopen = () => handleSocketOpen(roomId);
    socket.onmessage = (event) => handleSocketMessage(event, roomId);
    socket.onclose = () => handleSocketClose(roomId);
    socket.onerror = handleSocketError;

    connections.set(roomId, socket);
    console.log(`Connecting to room ${roomId}`);
}

function handleSocketOpen(roomId) {
    console.log(`WebSocket connection opened for room ${roomId}`);
    appendStatusMessage(roomId, 'Connected', 'green', `You are now connected to room ${roomId}`);
}

function handleSocketMessage(event, roomId) {
    const data = JSON.parse(event.data);
    if (data.type === 'message') {
        displayChatMessage(data.message, data.name, roomId);
    } else if (data.type === 'image') {
        displayImage(data.image, data.name, roomId);
    } else {
        console.warn('Unknown message type:', data.type);
    }
    scrollToBottom();
}

function handleSocketClose(roomId) {
    console.log(`WebSocket connection closed for room ${roomId}`);
    appendStatusMessage(roomId, 'Disconnected', 'red', `You have been disconnected from room ${roomId}`);
    connections.delete(roomId);
    reconnectWebSocket(roomId);
}

function handleSocketError(error) {
    console.error('WebSocket error:', error);
}

function reconnectWebSocket(roomId) {
    let retries = 0;
    const maxRetries = 5;

    function tryReconnect() {
        if (retries >= maxRetries) {
            console.error('Max reconnect attempts reached. Giving up.');
            return;
        }
        retries++;
        console.log(`Reconnecting to room ${roomId}... (Attempt ${retries}/${maxRetries})`);
        connectToRoom(roomId);
    }

    setTimeout(tryReconnect, 3000);
}

function handleMessage(event) {
    if (event.key === 'Enter') {
        sendMessage();
    }
}

function sendMessage() {
    const message = document.getElementById('message-input').value.trim();
    if (message && socket && socket.readyState === WebSocket.OPEN) {
        socket.send(JSON.stringify({
            room_id: window.config.roomId,
            type: 'message',
            name: window.config.nickname,
            message: message,
        }));
        document.getElementById('message-input').value = '';
    } else {
        socket_state(socket);
        reconnectWebSocket(window.config.roomId);
    }
}

function displayChatMessage(message, name, roomId) {
    if (typeof message !== 'string') {
        console.error('Invalid input: expected a string.');
        return;
    }

    const messageContainer = document.querySelector(`.chat-messages[data-room="${roomId}"]`);
    if (!messageContainer) return;

    const messageElement = document.createElement('div');
    messageElement.style.display = 'flex';
    messageElement.style.padding = '0 0 5px 0';
    messageElement.style.lineHeight = '1.3';
    messageElement.style.width = '100%';

    const username = document.createElement('span');
    username.textContent = `${name}:`;
    username.style.color = 'blue';
    username.style.fontWeight = 'bold';
    username.style.marginRight = '10px';

    const messageText = document.createElement('span');
    messageText.classList.add('chat-text');
    messageText.innerHTML = message;

    messageElement.appendChild(username);
    messageElement.appendChild(messageText);
    messageContainer.appendChild(messageElement);
}

function displayImage(imageUrl, name, roomId) {
    const imageContainer = document.querySelector(`.chat-messages[data-room="${roomId}"]`);
    if (!imageContainer) return;

    const messageWrapper = document.createElement('div');
    messageWrapper.style.display = 'flex';
    messageWrapper.style.padding = '0 0 5px 0';

    const username = document.createElement('span');
    username.textContent = name.endsWith(':') ? name : `${name}:`;
    username.style.color = 'blue';
    username.style.fontWeight = 'bold';
    username.style.marginRight = '10px';

    const imgElement = document.createElement('img');
    imgElement.src = imageUrl;
    imgElement.style.maxWidth = '80px';
    imgElement.style.height = 'auto';

    const placeholderUrl = 'static/images/meme/miku_impatient.png';
    const placeholder = document.createElement('img');
    placeholder.src = placeholderUrl;
    placeholder.style.maxWidth = '100px';
    placeholder.style.height = 'auto';
    placeholder.style.display = 'none';

    messageWrapper.appendChild(username);
    messageWrapper.appendChild(imgElement);
    messageWrapper.appendChild(placeholder);
    imageContainer.appendChild(messageWrapper);

    imgElement.onload = () => {
        placeholder.style.display = 'none';
        scrollToBottom();
    };

    imgElement.onerror = () => {
        imgElement.style.display = 'none';
        placeholder.style.display = 'inline-block';
        const errorMessage = document.createElement('div');
        errorMessage.innerText = 'Failed to load image';
        errorMessage.style.color = 'red';
        imageContainer.appendChild(errorMessage);
        scrollToBottom();
    };
}

function appendStatusMessage(roomId, status, color, message) {
    const tag = document.createElement('div');
    tag.innerText = status;
    tag.style.color = color;
    tag.append(`\t${message}`);
    const messageContainer = document.querySelector(`.chat-messages[data-room="${roomId}"]`);
    if (messageContainer) {
        messageContainer.appendChild(tag);
    }
}

function scrollToBottom() {
	const messageContainers = document.querySelectorAll('.chat-messages');
	messageContainers.forEach(container => container.scrollTop = container.scrollHeight);
}
